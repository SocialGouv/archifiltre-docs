name: CI
on:
  - push
  - pull_request
  - workflow_dispatch

jobs:
  Quality:
    strategy:
      # Don't fast-fail on tag and master and develop
      fail-fast: ${{ github.event_name == 'pull_request' || (github.ref !=
        'refs/heads/master' && github.ref !=
        'refs/heads/develop' && !startsWith(github.ref, 'refs/tags/')) }}

    name: Quality Control on Node 14.x (ubuntu-latest)
    runs-on: ubuntu-latest

    outputs:
      next_version: ${{ steps.next.outputs.next_version }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: lts/*
          cache: yarn

      - name: Installing
        run: |
          sed -i "s/postinstall/disabled-postinstall/g" package.json
          yarn --frozen-lockfile --perfer-offline

      - name: Lint
        run: yarn lint

      - name: Unit tests
        run: yarn test-coverage

      - name: Send test coverage to codecov
        continue-on-error: true
        uses: codecov/codecov-action@v2

      - name: Build next version
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: next
        run: |
          npx semantic-release --plugins @semantic-release/commit-analyzer @semantic-release/npm

          # HACK(douglasduteil): Remove the tag made by this command...
          # I do not know how to stop semantic-release from pushing this tag :(
          version=$(node -e 'console.log(require("./package.json").version)')
          echo "[haked-semantic-release] â€º Removing tag v${version}"
          git push origin :v${version}

          # HACK(douglasduteil): Store the version for future builds
          echo "::set-output name=next_version::${version}"

      - name: Set .env to production
        run: cp .env.prod .env

      - name: Build electron
        run: webpack --mode production --config webpack.electron-main.js

      - name: Build renderer
        run: webpack --mode production

      - name: Archive dist
        uses: actions/upload-artifact@v2
        with:
          name: electron-dist
          path: electron/dist/

  Build:
    # We build on any distribution channel
    # see https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md#branches
    if: |
      (
        github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      ) &&
      (
        contains(
          'refs/heads/master,refs/heads/beta,refs/heads/next,refs/heads/alpha',
          github.ref
        ) ||
        startsWith(github.ref, 'refs/tags/')
      )
    needs:
      - Quality

    strategy:
      matrix:
        isWorkflowDispatch:
          - ${{ github.event_name == 'workflow_dispatch' }}
        isReleaseChanel:
          - ${{ contains('refs/heads/master,refs/heads/beta,refs/heads/next,refs/heads/alpha', github.ref) }}
        script:
          - linux
          - mac
          - win32
          - win32-msi
          - win64-msi

        #

        exclude:
          - isReleaseChanel: true
            isWorkflowDispatch: false
            script: linux
          - isReleaseChanel: true
            isWorkflowDispatch: false
            script: mac
          - isReleaseChanel: true
            isWorkflowDispatch: false
            script: win32
          - isReleaseChanel: true
            isWorkflowDispatch: false
            script: win32-msi
          - isReleaseChanel: true
            isWorkflowDispatch: false
            script: win64-msi
        include:
          - name: Windows 64-bits
            os: windows-latest
            script: win64
          - name: Windows 32-bits
            os: windows-latest
            script: win32
          - name: MSI Windows 64-bits
            os: windows-latest
            script: win64-msi
          - name: MSI Windows 32-bits
            os: windows-latest
            script: win32-msi
          - name: MacOS
            os: macOS-latest
            script: mac
          - name: Linux
            os: ubuntu-latest
            script: linux

    name: Build binary for ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ARCHIFILTRE_VERSION: ${{ github.sha }}
      WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
      WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: lts/*
          cache: yarn

      - name: Build next version
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          yarn global add replace
          $(yarn global bin)/replace '"version": "[^"]+"' '"version": "${{ needs.Quality.outputs.next_version }}"' ./package.json

      - name: Get yarn cache directory path
        id: init
        shell: bash
        run: |
          echo "::set-output name=yarn_cache::$(yarn cache dir)"
          echo "::set-output name=version::$(node -e "console.log(require('./package.json').version);")"
          #
          echo "Node $(node --version)"
          echo "Yarn $(yarn --version)"

      - name: Installing
        run: yarn --frozen-lockfile --perfer-offline
        env:
          ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
          ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

      - name: Download dist form build job
        uses: actions/download-artifact@v2
        with:
          name: electron-dist
          path: electron/dist/

      - name: Build
        run: yarn ${{ matrix.script }}

      - name: Archive dist
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.script }}-bin
          path: dist/*/archifiltre-*

  PreRelease:
    if: ${{ github.event_name != 'workflow_dispatch' &&  contains('refs/heads/master,refs/heads/beta,refs/heads/next,refs/heads/alpha', github.ref) }}
    needs:
      - Quality
      - Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download all dist from build jobs
        uses: actions/download-artifact@v2

      - name: Rename build asset
        run: |
          mkdir -p dist/win64-bin
          mv win64-bin/*/archifiltre-*.exe dist/win64-bin/archifiltre-master.exe

      - name: Upload to latest-build
        uses: eine/tip@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: dist/win64-bin/archifiltre-master.exe
          tag: latest-build
          rm: true

  Release:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    needs:
      - Quality
      - Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download all dist form build jobs
        uses: actions/download-artifact@v2

      # HACK(douglasduteil): move wanted artifacts to dist folder
      # actions/download-artifact will create subdirectory per artifact
      - name: Build
        run: |
          mkdir -p dist/linux
          mv linux-bin/*/archifiltre-*.AppImage dist/linux/
          mkdir -p dist/mac
          mv mac-bin/*/archifiltre-*.dmg dist/mac/
          mkdir -p dist/win32
          mv win32-bin/*/archifiltre-*.exe dist/win32/archifiltre-${{ needs.Quality.outputs.next_version }}-32bit.exe
          mkdir -p dist/win32-msi
          mv win32-msi-bin/*/archifiltre-*.msi dist/win32-msi/archifiltre-${{ needs.Quality.outputs.next_version }}-32bit.msi
          mkdir -p dist/win64
          mv win64-bin/*/archifiltre-*.exe dist/win64/
          mkdir -p dist/win64-msi
          mv win64-msi-bin/*/archifiltre-*.msi dist/win64-msi/

      - name: Generate hashes
        run: |
          openssl dgst -sha512 dist/linux/archifiltre-*.AppImage > dist/linux/archifiltre-linux.sha512
          openssl dgst -sha512 dist/mac/archifiltre-*.dmg > dist/mac/archifiltre-mac.sha512
          openssl dgst -sha512 dist/win32/archifiltre-*.exe > dist/win32/archifiltre-win32.sha512
          openssl dgst -sha512 dist/win32-msi/archifiltre-*.msi > dist/win32-msi/archifiltre-win32-msi.sha512
          openssl dgst -sha512 dist/win64/archifiltre-*.exe > dist/win64/archifiltre-win64.sha512
          openssl dgst -sha512 dist/win64-msi/archifiltre-*.msi > dist/win64-msi/archifiltre-win64-msi.sha512

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/exec
            @semantic-release/git
        env:
          GIT_AUTHOR_EMAIL: ${{ secrets.SOCIALGROOVYBOT_EMAIL }}
          GIT_AUTHOR_NAME: ${{ secrets.SOCIALGROOVYBOT_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.SOCIALGROOVYBOT_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.SOCIALGROOVYBOT_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
